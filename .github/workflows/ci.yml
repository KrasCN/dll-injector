name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Check
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for Windows x64
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 0
      run: go build -v ./cmd/dll-injector

    - name: Build for Windows x86
      env:
        GOOS: windows
        GOARCH: 386
        CGO_ENABLED: 0
      run: go build -v ./cmd/dll-injector

  lint:
    name: Lint
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

#    - name: Run golangci-lint
#      uses: golangci/golangci-lint-action@v3
#      with:
#        version: latest
#        args: --timeout=5m --config=.golangci.yml

  format-check:
    name: Format Check
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check formatting
      run: |
        $unformatted = go fmt ./...
        if ($unformatted) {
          echo "The following files are not formatted:"
          echo $unformatted
          exit 1
        }
        echo "All files are properly formatted"

    - name: Check imports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        $unformatted = goimports -l .
        if ($unformatted) {
          echo "The following files have incorrect imports:"
          echo $unformatted
          exit 1
        }
        echo "All imports are properly formatted"
