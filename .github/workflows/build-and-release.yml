name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  build-amd64:
    name: Build AMD64
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build AMD64 GUI
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 1
      run: |
        # Build GUI version with optimizations to reduce size and hide console
        go build -ldflags="-s -w -H windowsgui" -o dll-injector-x64.exe ./cmd/injector

    - name: Compress AMD64 binary
      run: |
        # Install UPX for binary compression
        choco install upx -y
        # Compress the binary (can reduce size by 50-70%)
        upx --best --lzma dll-injector-x64.exe

    - name: Upload AMD64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: dll-injector-amd64
        path: |
          dll-injector-x64.exe

  build-386:
    name: Build 386
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup 32-bit build environment
      run: |
        # Install MSYS2 which includes proper 32-bit MinGW support
        choco install msys2 -y
        # Install 32-bit toolchain
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Sy --noconfirm"
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-i686-toolchain"
        # Add 32-bit MinGW to PATH
        echo "C:\tools\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Build 386 GUI
      env:
        GOOS: windows
        GOARCH: 386
        CGO_ENABLED: 1
        CC: C:\tools\msys64\mingw32\bin\gcc.exe
        CXX: C:\tools\msys64\mingw32\bin\g++.exe
      run: |
        # Build GUI version with optimizations to reduce size and hide console
        go build -ldflags="-s -w -H windowsgui" -o dll-injector-x86.exe ./cmd/injector

    - name: Compress 386 binary
      run: |
        # Install UPX for binary compression
        choco install upx -y
        # Compress the binary (can reduce size by 50-70%)
        upx --best --lzma dll-injector-x86.exe

    - name: Upload 386 artifact
      uses: actions/upload-artifact@v4
      with:
        name: dll-injector-386
        path: |
          dll-injector-x86.exe

  release:
    name: Create Release
    runs-on: windows-latest
    needs: [build-amd64, build-386]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        # Copy GUI artifacts to root directory for release
        Copy-Item "artifacts\dll-injector-amd64\dll-injector-x64.exe" -Destination "dll-injector-x64.exe"
        Copy-Item "artifacts\dll-injector-386\dll-injector-x86.exe" -Destination "dll-injector-x86.exe"

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dll-injector-x64.exe
          dll-injector-x86.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
